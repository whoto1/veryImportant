//#define _CRT_SECURE_NO_WARNINGS
#include "cublas_v2.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <cuda_runtime.h>
#define IDX2F(i,j,ld) ((((j)-1)*(ld))+((i)-1))
#define BILLION 1000000000
#define MAX(X,Y) (((X) > (Y)) ? (X) : (Y))
#define N 1024
int main(int argc, char** argv) {
	struct timespec start, stop;
	clock_gettime(CLOCK_REALTIME, &start);
	double delta;
	int m, iter_max;
	double tol;
	sscanf(argv[1], "%d", &m);
	sscanf(argv[2], "%d", &iter_max);
	sscanf(argv[3], "%lf", &tol);

	/*int m = 128; int iter_max = 1000000;
	double tol = 1e-6;*/

	//m = 5;
	//iter_max = 1;
	//tol = 1e-6;
	double* arr = (double*)malloc(2 * m * m * sizeof(double)); // creatin array
	for (int i = 1; i <= m; i++)//initializing array
	{
		for (int j = 1; j <= m; j++)
			arr[IDX2F(i,j,m)] = 0;
	}
	//initializing boundaries
	arr[IDX2F(1, 1, m)] = arr[IDX2F(1, m+1, m)] = 10;//up left
	arr[IDX2F(1, m, m)] = arr[IDX2F(1, 2*m, m)] = 20; //up right
	arr[IDX2F(m, 1, m)] = arr[IDX2F(m, m+1, m)] = 30;	//down left
	arr[(IDX2F(m, m, m))] = arr[IDX2F(m, 2*m, m)] = 20; //down right

		
	
	//coefficients for the interpolation
	double top = (arr[IDX2F(1, m, m)] - arr[IDX2F(1, 1, m)]) / (m - 1);
	double btm = (arr[IDX2F(m, m, m)] - arr[IDX2F(m, 1, m)]) / (m - 1);
	double lft = (arr[IDX2F(m, 1, m)] - arr[IDX2F(m, m + 1, m)]) / (m - 1);
	double rght = (arr[IDX2F(m, m, m)] - arr[IDX2F(1, m, m)]) / (m - 1);

		//printf("%lf %lf %lf %lf", top, btm, lft, rght);
		
	
	for (int j = 1; j < m; j++) { // interpolation
		arr[IDX2F(1, j, m)] = arr[IDX2F(1, j+m, m)] = (j-1) * top + arr[IDX2F(1, 1, m)];   	//top
		arr[IDX2F(m, j, m)] = arr[IDX2F(m, j+m, m)] = (j - 1) * btm + arr[IDX2F(m, 1, m)]; 	//bottom
		arr[IDX2F(j, 1, m)] = arr[IDX2F(j, m+1, m)] = (j - 1) * lft + arr[IDX2F(1, 1, m)]; 		//left
		//printf("%lf %d\n ", arr[2*m*j],2*m*j);
		arr[IDX2F(j, m, m)] = arr[IDX2F(j, 2*m, m)] = rght * (j - 1) + arr[IDX2F(1, m, m)]; 	//right
	}
	/*for(int i =1;i<=m;i++)
	{
		for(int j =1;j<=2*m;j++)
		{
			printf("%lf ",arr[IDX2F(i, j, m)]);
		}
		printf("\n");
	}*/


	cudaError_t cudaStat;
	cublasStatus_t stat;

	cublasHandle_t handle;
	stat = cublasCreate(&handle);
	if(stat != CUBLAS_STATUS_SUCCESS){
		printf("cublas handle failed\n");
		return EXIT_FAILURE;
	}

	double* newArr;
	double* oldArr;
	cudaStat = cudaMalloc((void**)&newArr, m * m * sizeof(*arr));

	if (cudaStat != cudaSuccess) {
		printf("device memory allocation failed");
		return EXIT_FAILURE;
	}

	cudaStat = cudaMalloc((void**)&oldArr, m * m * sizeof(*arr));

	if (cudaStat != cudaSuccess) {
		printf("device memory allocation failed");
		return EXIT_FAILURE;
	}
	double* buf = (double*)malloc(sizeof(double));



	double alpha = -1;
	int iter = 0;

	double err = tol + 1;
	#pragma acc data copy(arr[:(2*m*m)]) copyin(alpha) copyin(tol)
	{
		int right = 0, left = m;
		int idx=0;
		int flag=1;
		while (flag && iter < iter_max) {
			if (!(iter % 2)) //swapping arrays
			{//left to right
				left = 0;
				right = m;
			}
			else //right to left
			{
				left = m;
				right = 0;
			}
			#pragma acc parallel loop 
			for (int j = 2; j < m; j++) {
				#pragma acc loop
				for (int i = 2; i < m; i++) {
					arr[IDX2F(i, j+left, m)] = 0.25 * (arr[IDX2F(i+1, j+right, m)] + arr[IDX2F(i-1, j+right, m)]
						+ arr[IDX2F(i, j-1+right, m)] + arr[IDX2F(i, j+1+right, m)]);
				}
			}
	
			if (iter % 100 == 0)
			{
				err = 0;
				idx=0;	
				#pragma acc host_data use_device(arr)
				{
					stat = cublasSetVector(m * m, sizeof(*arr), arr, 1, oldArr, 1);
					if (stat != CUBLAS_STATUS_SUCCESS) {
						printf("CUBLAS initialization failed\n");
						//return EXIT_FAILURE;
					}
					stat = cublasSetVector(m * m, sizeof(*arr),(arr+m*m) , 1, newArr, 1);
					if (stat != CUBLAS_STATUS_SUCCESS) {
						printf("CUBLAS initialization failed\n");
						//return EXIT_FAILURE;
					}
					stat = cublasDaxpy(handle, m * m, &alpha, newArr, 1, oldArr, 1);
					if (stat != CUBLAS_STATUS_SUCCESS) {
						printf("substract failed\n");
						//return EXIT_FAILURE;
					}
					stat = cublasIdamax(handle, m * m, oldArr, 1, &idx);
					if (stat != CUBLAS_STATUS_SUCCESS) {
						printf("max failed\n");
					//	return EXIT_FAILURE;
					}
					stat = cublasGetVector(1, sizeof(*arr), (oldArr + idx - 1), 1, buf, 1);
					if (stat != CUBLAS_STATUS_SUCCESS) {
						printf("get failed\n");
						//return EXIT_FAILURE;
					}
					err = fabs(*buf);
					flag = err > tol;
					//printf("%d ", idx);
				}
			}
			iter++;
		}
	}

	/*for(int i = 1;i=<15;i++)
	{
		for(int j =1;j<=15;j++)
			printf("%lf ",arr[IDX2F(i, j, m)]);

		printf("\n");
				
	}*/
	clock_gettime(CLOCK_REALTIME, &stop);
	delta = (stop.tv_sec - start.tv_sec) + (double)(stop.tv_nsec - start.tv_nsec) / (double)BILLION;
	printf("time %lf\n", delta);
	printf("Final result: %d, %0.6lf\n", iter, err);
	//cudaFree(oldArr);
	//cudaFree(newArr);
	cublasDestroy(handle);
	free(arr);
	//printf("%d%d%lf", m, iter_max, tol);
	return 0;
}

