#include "/opt/nvidia/hpc_sdk/Linux_x86_64/22.11/math_libs/11.8/targets/x86_64-linux/include/cublas_v2.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#define BILLION 1000000000


int main(int argc, char** argv) {

    struct timespec start, stop;
    clock_gettime(CLOCK_REALTIME, &start);

    int n, iter_max;
    double tol;
    sscanf(argv[1], "%d", &n);
    sscanf(argv[2], "%d", &iter_max);
    sscanf(argv[3], "%lf", &tol);
    
    double *buf;
    cublasHandle_t handle;
    cublasCreate(&handle);

    const double alpha = -1;
    double step1 = 10.0 / (n - 1);

    double* arr = (double*)calloc(n*n, sizeof(double));
    double* up = (double*)calloc(n*n, sizeof(double));	


    double x1 = 10.0;
    double x2 = 20.0;
    double y1 = 20.0;
    double y2 = 30.0;


    arr[0] = up[0] = x1;
    arr[n] = up[n] = x2;
    arr[n * (n - 1) + 1] = up[n * (n - 1) + 1] = y1;
    arr[n * n] = up[n * n] = y2;

#pragma acc enter data create(u[0:n*n], up[0:n*n]) copyin(n, step1)
#pragma acc kernels
    {
#pragma acc loop independent
        for (int i = 0; i < n; i++) {
            arr[i*n] = up[i*n] = x1 + i * step1;
            arr[i] = up[i] = x1 + i * step1;
            arr[(n - 1) * n + i] = up[(n - 1) * n + i] = y1 + i * step1;
            arr[i * n + (n - 1)] = up[i * n + (n - 1)] = x2 + i * step1;        }
    }

    int itter = 0;
    double error = 1.0;
    {
    while (itter < iter_max && error > tol) {
 
#pragma acc data present(u[0:n*n], up[0:n*n])
#pragma acc kernels async(1)
            {
#pragma acc loop independent collapse(2)
                for (int i = 1; i < n - 1; i++) {
                    for (int j = 1; j < n - 1; j++) {
                        up[i * n + j] =
                                0.25 * (arr[(i + 1) * n + j] + arr[(i - 1) * n + j] + arr[i * n + j - 1] + arr[i * n + j + 1]);
                    }
                }
            }
            int id = 0;
#pragma acc wait
#pragma acc host_data use_device(arr, up)
            {
                cublasDaxpy(handle, n * n, &alpha, up, 1, arr, 1);
                cublasIdamax(handle, n * n, arr, 1, &id);

            }
#pragma acc update self(arr[id-1:1])
            error = fabs(arr[id - 1]);
#pragma acc host_data use_device(arr, up)
            cublasDcopy(handle, n * n, up, 1, arr, 1);


        buf = arr;
        arr = up;
        up = buf;

        if (itter % 100 == 0 || itter == 1)
#pragma acc wait(1)
            printf("%d %e\n", itter, error);
        itter++;
    }
}

    clock_gettime(CLOCK_REALTIME, &stop);
    double delta = (stop.tv_sec - start.tv_sec) + (double)(stop.tv_nsec - start.tv_nsec)/(double)BILLION;

    printf("%d\n", itter);
    printf("%e", error);
    printf("time %lf\n", delta);

    cublasDestroy(handle);
    return 0;
}
