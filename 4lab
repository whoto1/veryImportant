#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>
#include <cuda_runtime.h>
#include <cub/cub.cuh>
#define BILLION 1000000000.0
#define MAX(x, y) (((x)>(y))?(x):(y))
#define ABS(x) ((x)<0 ? -(x): (x))
#define IDX2F(i,j,ld) ((((j)-1)*(ld))+((i)-1))
__global__ void fillBorders(double *arr, double top,
		double bottom, double left, double right,
                          int m) {

  //we perform linear interpolation on the borders of the array
  int j = blockDim.x * blockIdx.x + threadIdx.x;

  if ((j > 0) && (j < m)) {
	  arr[IDX2F(1,j,m)] = arr[IDX2F(1,j+m,m)] = (arr[IDX2F(1,1,m)] + top*(j-1));   //top
          arr[IDX2F(m,j,m)] = arr[IDX2F(m,j+m,m)]  = (arr[IDX2F(m,1,m)] + bottom*(j-1)); //bottom
          arr[IDX2F(j,1,m)]  = arr[IDX2F(j,m+1,m)] = (arr[IDX2F(1,1,m)] + left*(j-1)); //left
          arr[IDX2F(j,m,m)] = arr[IDX2F(j,2*m,m)] = (arr[IDX2F(1,m,m)] + right*(j-1)); //right
  }
}
__global__ void getAverage(double *arr, int p, int q,
                          int m) {

  //we assign the cell the average value from a cross surrounding it

  int i = blockDim.x * blockIdx.x + threadIdx.x;
  int j = blockDim.y * blockIdx.y + threadIdx.y;

  if ((i > 1) && (i < m) && (j > 1) && (j < m)) {
    arr[IDX2F(i,j+p,m)] = 0.25 * (arr[IDX2F(i+1,j+q,m)] + arr[IDX2F(i-1,j+q,m)]
                                                + arr[IDX2F(i,j-1+q,m)] + arr[IDX2F(i,j+1+q,m)]);
  }
}
__global__ void subtractArrays(const double *arr_a, double *arr_b,
                          int m) {

  int i = blockDim.x * blockIdx.x + threadIdx.x;
  int j = blockDim.y * blockIdx.y + threadIdx.y;

  if ((i > 1) && (i < m) && (j > 1) && (j < m)) {
	  arr_b[IDX2F(i,j,m)] = ABS(arr_a[IDX2F(i,j,m)] - arr_a[IDX2F(i,j+m,m)]);
  }
}
int main(int argc, char *argv[]){
        struct timespec start, stop;
        clock_gettime(CLOCK_REALTIME, &start);
        double delta;
        int m;
        int iter_max;
        double tol;
        sscanf(argv[1], "%d", &m);
        sscanf(argv[2], "%d", &iter_max);
        sscanf(argv[3], "%lf", &tol);
	
        int iter = 0;
        double err = tol + 1;
	size_t size = 2 * m * m * sizeof(double);
        double *arr = (double*)malloc(size);

        for(int j = 1; j <= m; j++)
        {
                for(int i = 1; i <= m; i++)
                {
                        arr[IDX2F(i,j,m)] = 0;

                }
        }
        arr[IDX2F(1,1,m)] = arr[IDX2F(1,m+1,m)] = 10;
        arr[IDX2F(1,m,m)] = arr[IDX2F(1,2*m,m)] = 20;
        arr[IDX2F(m,1,m)] = arr[IDX2F(m,m+1,m)] = 20;
        arr[IDX2F(m,m,m)] = arr[IDX2F(m,2*m,m)] = 30;
        /* coefficients for linear interpolation */
        double top, bottom, left, right;
        top = (arr[IDX2F(1,m,m)] - arr[IDX2F(1,1,m)])/(m-1);
        bottom = (arr[IDX2F(m,m,m)] - arr[IDX2F(m,1,m)])/(m-1);
        left = (arr[IDX2F(m,1,m)] - arr[IDX2F(1,1,m)])/(m-1);
        right = (arr[IDX2F(m,m,m)] - arr[IDX2F(1,m,m)])/(m-1);

	cudaError_t cudaErr = cudaSuccess;
	double *d_A = NULL;
  	cudaErr = cudaMalloc((void **)&d_A, size);

	double *d_B = NULL;
	cudaErr = cudaMalloc((void **)&d_B, size/2);
	cudaStream_t stream;
        cudaStreamCreate(&stream);
	cudaErr = cudaMemcpyAsync(d_A, arr, size, cudaMemcpyHostToDevice, stream);

	//this kernel fills the borders using linear interpolation
	fillBorders<<<(1, 1024, 0, stream>>>(d_A, top, bottom, left, right, m);
	cudaErr = cudaMemcpyAsync(arr, d_A, size, cudaMemcpyDeviceToHost, stream);
	
	printf("\n");
	if (m == 13) {
	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= 2*m; j++) {
			printf("%06.3lf ", arr[IDX2F(i,j,m)]);
		}
		printf("\n");
	}
	}
	int p, q;
	p = m;
	q = 0;
	int flag = 1;
	double *h_buff = (double*)malloc(sizeof(double));
	double *d_buff = NULL;
	cudaErr = cudaMalloc((void**)&d_buff, sizeof(double));
	
	dim3 grid(32 , 32);

	dim3 block(32, 32);

	void *d_temp_storage = NULL;
        size_t temp_storage_bytes = 0;
	//we call DeviceReduce here to check how much memory we need for temporary storage
        cub::DeviceReduce::Max(d_temp_storage, temp_storage_bytes, d_B, d_buff, m*m, stream);
        cudaMalloc(&d_temp_storage, temp_storage_bytes);
	bool graphCreated=false;
	cudaGraph_t graph;
	cudaGraphExec_t instance;

        {
        while(iter < iter_max && flag) {
		if(!graphCreated) {
			//here we begin capturing kernel calls in a graph before calling them. This allows us to reduce call overhead
			cudaErr = cudaStreamBeginCapture(stream, cudaStreamCaptureModeGlobal);
			for (int i = 0; i < 100; i++) {
				q = (i % 2) * m; //q and p choose what array we consider new and what array we consider old
				p = m - q;
				getAverage<<<grid, block, 0, stream>>>(d_A, p, q, m);
			}
			cudaErr = cudaStreamEndCapture(stream, &graph);
			cudaErr = cudaGraphInstantiate(&instance, graph, NULL, NULL, 0);
			graphCreated=true;

		}
		cudaErr = cudaGraphLaunch(instance, stream);
		//we check the error every 100 iterations
		iter += 100;
		//here we calculate absolute values of array differences and than find the maximum diffirence, i.e. error
		subtractArrays<<<grid, block, 0, stream>>>(d_A, d_B, m);
		cub::DeviceReduce::Max(d_temp_storage, temp_storage_bytes, d_B, d_buff, m*m, stream);
		cudaErr = cudaMemcpyAsync(h_buff, d_buff, sizeof(double), cudaMemcpyDeviceToHost, stream);
		err = *h_buff;
		flag = err > tol;
        }
        }

        clock_gettime(CLOCK_REALTIME, &stop);
        delta = (stop.tv_sec - start.tv_sec)
                + (double)(stop.tv_nsec - start.tv_nsec)/(double)BILLION;
        printf("Elapsed time %lf\n", delta);
        printf("Final result: %d, %0.8lf\n", iter, err);
	cudaErr = cudaMemcpy(arr, d_A, size, cudaMemcpyDeviceToHost);

	if (m == 13) {
        for (int i = 1; i <= m; i++) {
                for (int j = 1; j <= 2*m; j++) {
                        printf("%06.3lf ", arr[IDX2F(i,j,m)]);
                }
                printf("\n");
        }
        }
        free(arr);
	free(h_buff);
	cudaFree(d_buff);
	cudaFree(d_A);
	cudaFree(d_B);
	cudaFree(d_temp_storage);
        return EXIT_SUCCESS;

}

